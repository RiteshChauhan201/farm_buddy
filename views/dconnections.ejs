<%- include("partials/header"); -%>

<script src="https://cdn.socket.io/socket.io-4.2.0.min.js"></script>
    
</head>
<body>
    <%- include("partials/dealernavbar"); -%>
    
 

    <script src="https://cdn.socket.io/socket.io-4.2.0.min.js"></script>
    
    
        <!-- <!DOCTYPE html>
    <html>
    
    <head>
        <title>Chat App</title>
        <link rel="icon" href="/img/favicon.png">
        <link rel="stylesheet" href="/css/styles.min.css">
    </head>
    
    <body>
        <div class="chat">
            <div id="sidebar" class="chat__sidebar">
    
            </div>
            <div class="chat__main">
                <div id="messages" class="chat__messages"></div>
    
                <div class="compose">
                    <form id="message-form">
                        <input name="message" placeholder="Message" required autocomplete="off">
                        <button>Send</button>
                    </form>
                    <button id="send-location">Send location</button>
                </div>
            </div>
        </div>
    
        <script id="message-template" type="text/html">
                <div class="message">
                    <p>
                        <span class="message__name">{{username}}</span>
                        <span class="message__meta">{{createdAt}}</span>
                    </p>
                    <p>{{message}}</p>
                </div>
            </script>
    
        <script id="location-message-template" type="text/html">
                <div class="message">
                    <p>
                        <span class="message__name">{{username}}</span>
                        <span class="message__meta">{{createdAt}}</span>
                    </p>
                    <p><a href="{{url}}" target="_blank">My current location</a></p>
                </div>
            </script>
    
        <script id="sidebar-template" type="text/html">
            <h2 class="room-title">{{room}}</h2>
            <h3 class="list-title">Users</h3>
            <ul class="users">
                {{#users}}
                    <li>{{username}}</li>
                {{/users}}
            </ul>
        </script>
    
        <script src="https://cdnjs.cloudflare.com/ajax/libs/mustache.js/3.0.1/mustache.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/qs/6.6.0/qs.min.js"></script>
        <script src="/socket.io/socket.io.js"></script>
        <script>
            const socket = io()
    
    // Elements
    const $messageForm = document.querySelector('#message-form')
    const $messageFormInput = $messageForm.querySelector('input')
    const $messageFormButton = $messageForm.querySelector('button')
    const $sendLocationButton = document.querySelector('#send-location')
    const $messages = document.querySelector('#messages')
    
    // Templates
    const messageTemplate = document.querySelector('#message-template').innerHTML
    const locationMessageTemplate = document.querySelector('#location-message-template').innerHTML
    const sidebarTemplate = document.querySelector('#sidebar-template').innerHTML
    
    // Options
    const { username, room } = Qs.parse(location.search, { ignoreQueryPrefix: true })
    
    const autoscroll = () => {
        // New message element
        const $newMessage = $messages.lastElementChild
    
        // Height of the new message
        const newMessageStyles = getComputedStyle($newMessage)
        const newMessageMargin = parseInt(newMessageStyles.marginBottom)
        const newMessageHeight = $newMessage.offsetHeight + newMessageMargin
    
        // Visible height
        const visibleHeight = $messages.offsetHeight
    
        // Height of messages container
        const containerHeight = $messages.scrollHeight
    
        // How far have I scrolled?
        const scrollOffset = $messages.scrollTop + visibleHeight
    
        if (containerHeight - newMessageHeight <= scrollOffset) {
            $messages.scrollTop = $messages.scrollHeight
        }
    }
    
    socket.on('message', (message) => {
        console.log(message)
        const html = Mustache.render(messageTemplate, {
            username: message.username,
            message: message.text,
            createdAt: moment(message.createdAt).format('h:mm a')
        })
        $messages.insertAdjacentHTML('beforeend', html)
        autoscroll()
    })
    
    socket.on('locationMessage', (message) => {
        console.log(message)
        const html = Mustache.render(locationMessageTemplate, {
            username: message.username,
            url: message.url,
            createdAt: moment(message.createdAt).format('h:mm a')
        })
        $messages.insertAdjacentHTML('beforeend', html)
        autoscroll()
    })
    
    socket.on('roomData', ({ room, users }) => {
        const html = Mustache.render(sidebarTemplate, {
            room,
            users
        })
        document.querySelector('#sidebar').innerHTML = html
    })
    
    $messageForm.addEventListener('submit', (e) => {
        e.preventDefault()
    
        $messageFormButton.setAttribute('disabled', 'disabled')
    
        const message = e.target.elements.message.value
    
        socket.emit('sendMessage', message, (error) => {
            $messageFormButton.removeAttribute('disabled')
            $messageFormInput.value = ''
            $messageFormInput.focus()
    
            if (error) {
                return console.log(error)
            }
    
            console.log('Message delivered!')
        })
    })
    
    $sendLocationButton.addEventListener('click', () => {
        if (!navigator.geolocation) {
            return alert('Geolocation is not supported by your browser.')
        }
    
        $sendLocationButton.setAttribute('disabled', 'disabled')
    
        navigator.geolocation.getCurrentPosition((position) => {
            socket.emit('sendLocation', {
                latitude: position.coords.latitude,
                longitude: position.coords.longitude
            }, () => {
                $sendLocationButton.removeAttribute('disabled')
                console.log('Location shared!')  
            })
        })
    })
    
    socket.emit('join', { username, room }, (error) => {
        if (error) {
            alert(error)
            location.href = '/'
        }
    })
    
    
        </script>
    </body>
    
    </html> -->
    
    <!DOCTYPE html>
    <html>
      <head>
        <title>Chat App</title>
        <style>
            #chat {
              background-color: #f7f7f7;
              border: 1px solid #ccc;
              border-radius: 5px;
              padding: 10px;
              max-width: 800px;
              margin: 0 auto;
              /* padding-top: 300px; */
              margin-top: 100px;
              height: 600px;
              display: flex;
              flex-direction: column;
              justify-content: end;
              align-items: right;
              justify-items: right;
              background: #36d167;
        background-image: -webkit-linear-gradient(top, #36d167, #3291d1);
        background-image: -moz-linear-gradient(top, #36d167, #3291d1);
        background-image: -ms-linear-gradient(top, #36d167, #3291d1);
        background-image: -o-linear-gradient(top, #36d167, #3291d1);
        background-image: linear-gradient(to bottom, #36d167, #3291d1);
        border-radius: 10%;
        box-shadow: 0 0 10px green;
            }
            #messages {
              height: auto;
              overflow-y: scroll;
              line-height: 30px;
              font-size: 20px;
              text-align: end;
              padding: 30px;
            }
            #message-form {
              margin-top: 10px;
              justify-self: end;
              align-items: end;
              position: bottom;
              display: flex;
              justify-content: space-evenly;
    
            }
            #message-input {
              width: 80%;
              padding: 5px;
              border-radius: 5px;
              border: none;
              box-shadow: 1px 1px 2px #ccc;
            }
            #message-input:focus {
              outline: none;
            }
            button[type="submit"] {
              padding: 5px 10px;
              background-color: #007bff;
              color: #fff;
              border: none;
              border-radius: 5px;
              cursor: pointer;
              transition: all 0.2s ease-in-out;
            }
            button[type="submit"]:hover {
              background-color: #0062cc;
            }
          </style>
       
      </head>
      <body>
        <div id="chat">
          <div id="messages">
            <% messages.forEach(function(message) { %>
              <div><%= message.text %></div>
            <% }); %>
          </div>
          <form id="message-form">
            <input type="text" id="message-input" />
            <button type="submit">Send</button>
          </form>
        </div>
        <script src="/socket.io/socket.io.js"></script>
        <script>
          const socket = io();
    
          // Receive messages
          socket.on('message', (message) => {
            const messagesDiv = document.getElementById('messages');
            const messageDiv = document.createElement('div');
            messageDiv.innerText = message;
            messagesDiv.appendChild(messageDiv);
          });
    
          // Send messages
          const messageForm = document.getElementById('message-form');
          messageForm.addEventListener('submit', (event) => {
            event.preventDefault();
            const messageInput = document.getElementById('message-input');
            const message = messageInput.value;
            socket.emit('message', message);
            messageInput.value = '';
          });
        </script>
      </body>
    </html>
    
    